/**
 * @file test_triple_mining.cpp
 * @brief Programme de test pour le syst√®me de mining triple hybride r√©volutionnaire
 * 
 * Ce programme teste l'int√©gration des trois syst√®mes :
 * - SHA-256 traditionnel
 * - R√©seau biologique (BiologicalNetwork) 
 * - Neurones biologiques r√©els (RealMEAInterface)
 * 
 * Avec fusion intelligente, apprentissage crois√© et optimisation dynamique.
 */

#include <QCoreApplication>
#include <QDebug>
#include <QTimer>
#include <QThread>
#include <QDateTime>
#include "crypto/hybrid_bitcoin_miner.h"
#include "bio/real_mea_interface.h"
#include "bio/biological_network.h"

using namespace BioMining::HCrypto;
using namespace BioMining::Bio;
using namespace BioMining::Network;

class TripleSystemTester : public QObject
{
    Q_OBJECT

public:
    explicit TripleSystemTester(QObject *parent = nullptr)
        : QObject(parent)
        , m_hybridMiner(new HybridBitcoinMiner(this))
        , m_realMea(std::make_shared<RealMEAInterface>())
    {
        // Connexions des signaux pour monitoring
        connect(m_hybridMiner, &HybridBitcoinMiner::triplePredictionReady,
                this, &TripleSystemTester::onTriplePrediction);
        connect(m_hybridMiner, &HybridBitcoinMiner::systemWeightsUpdated,
                this, &TripleSystemTester::onWeightsUpdated);
        connect(m_hybridMiner, &HybridBitcoinMiner::optimalMethodSelected,
                this, &TripleSystemTester::onMethodSelected);
        connect(m_hybridMiner, &HybridBitcoinMiner::crossLearningCompleted,
                this, &TripleSystemTester::onCrossLearning);
        connect(m_hybridMiner, &HybridBitcoinMiner::blockFound,
                this, &TripleSystemTester::onBlockFound);
        connect(m_hybridMiner, &HybridBitcoinMiner::errorOccurred,
                this, &TripleSystemTester::onError);
    }

public slots:
    void runTripleSystemTest()
    {
        qDebug() << "\n=== TEST SYST√àME TRIPLE R√âVOLUTIONNAIRE ===";
        qDebug() << "üî• SHA-256 + R√©seau Biologique + Neurones MEA R√©els üî•\n";
        
        // 1. Initialisation des composants
        if (!initializeComponents()) {
            qCritical() << "‚ùå √âchec d'initialisation";
            QCoreApplication::exit(1);
            return;
        }
        
        // 2. Configuration du syst√®me triple
        if (!configureTripleSystem()) {
            qCritical() << "‚ùå √âchec configuration syst√®me triple";
            QCoreApplication::exit(1);
            return;
        }
        
        // 3. Tests de pr√©diction
        qDebug() << "üß† D√©but des tests de pr√©diction triple...";
        testTriplePredictions();
        
        // 4. Test d'apprentissage crois√©
        QTimer::singleShot(3000, this, &TripleSystemTester::testCrossLearning);
        
        // 5. Test d'optimisation dynamique
        QTimer::singleShot(6000, this, &TripleSystemTester::testDynamicOptimization);
        
        // 6. Mining complet
        QTimer::singleShot(9000, this, &TripleSystemTester::testFullMining);
        
        // 7. Arr√™t automatique
        QTimer::singleShot(15000, []() {
            qDebug() << "\nüéØ FIN DU TEST SYST√àME TRIPLE";
            QCoreApplication::quit();
        });
    }

private slots:
    void onTriplePrediction(const TripleSystemPrediction& prediction)
    {
        qDebug() << QString("üîÆ PR√âDICTION TRIPLE:");
        qDebug() << QString("   SHA256: %1 (conf: %2%)")
                    .arg(prediction.sha256Nonce)
                    .arg(prediction.sha256Confidence * 100, 0, 'f', 1);
        qDebug() << QString("   Network: %1 (conf: %2%)")
                    .arg(prediction.networkNonce)
                    .arg(prediction.networkConfidence * 100, 0, 'f', 1);
        qDebug() << QString("   MEA: %1 (conf: %2%)")
                    .arg(prediction.meaNonce)
                    .arg(prediction.meaConfidence * 100, 0, 'f', 1);
        qDebug() << QString("   üéØ FUSION: %1 (conf: %2%)")
                    .arg(prediction.fusedNonce)
                    .arg(prediction.fusedConfidence * 100, 0, 'f', 1);
    }
    
    void onWeightsUpdated(double sha256Weight, double networkWeight, double meaWeight)
    {
        qDebug() << QString("‚öñÔ∏è POIDS OPTIMIS√âS - SHA256: %1%, Network: %2%, MEA: %3%")
                    .arg(sha256Weight * 100, 0, 'f', 1)
                    .arg(networkWeight * 100, 0, 'f', 1)
                    .arg(meaWeight * 100, 0, 'f', 1);
    }
    
    void onMethodSelected(MiningMethod method, double confidence)
    {
        QString methodName;
        switch (method) {
            case MiningMethod::TraditionalSHA256: methodName = "SHA-256"; break;
            case MiningMethod::BiologicalNetwork: methodName = "R√©seau Bio"; break;
            case MiningMethod::RealMEANeurons: methodName = "MEA R√©el"; break;
            case MiningMethod::HybridFusion: methodName = "Fusion Hybride"; break;
        }
        
        qDebug() << QString("üéØ M√âTHODE S√âLECTIONN√âE: %1 (conf: %2%)")
                    .arg(methodName)
                    .arg(confidence * 100, 0, 'f', 1);
    }
    
    void onCrossLearning(bool success, double improvement)
    {
        qDebug() << QString("üîÑ APPRENTISSAGE CROIS√â: %1 (am√©lioration: %2%)")
                    .arg(success ? "SUCC√àS" : "√âCHEC")
                    .arg(improvement * 100, 0, 'f', 2);
    }
    
    void onBlockFound(const QString& blockHash, uint32_t nonce, double biologicalContribution)
    {
        qDebug() << QString("üèÜ BLOC TROUV√â ! Hash: %1, Nonce: %2, Bio: %3%")
                    .arg(blockHash.left(16))
                    .arg(nonce)
                    .arg(biologicalContribution * 100, 0, 'f', 1);
    }
    
    void onError(const QString& error)
    {
        qWarning() << QString("‚ö†Ô∏è ERREUR: %1").arg(error);
    }
    
    void testTriplePredictions()
    {
        qDebug() << "\nüß™ TEST DE PR√âDICTIONS MULTIPLES:";
        
        QStringList testHeaders = {
            "block_header_test_1_revolutionary_mining",
            "block_header_test_2_biological_neurons", 
            "block_header_test_3_mea_integration",
            "block_header_test_4_hybrid_fusion",
            "block_header_test_5_cross_learning"
        };
        
        for (int i = 0; i < testHeaders.size(); ++i) {
            QTimer::singleShot(i * 500, [this, testHeaders, i]() {
                qDebug() << QString("\nüìã Test %1/5: %2").arg(i+1).arg(testHeaders[i]);
                
                TripleSystemPrediction prediction = m_hybridMiner->predictNonceTriple(testHeaders[i]);
                
                // Validation simul√©e (30% de succ√®s)
                bool success = (QRandomGenerator::global()->bounded(100) < 30);
                
                QTimer::singleShot(200, [this, prediction, success]() {
                    m_hybridMiner->validateTriplePrediction(prediction, success);
                });
            });
        }
    }
    
    void testCrossLearning()
    {
        qDebug() << "\nüîÑ TEST APPRENTISSAGE CROIS√â:";
        m_hybridMiner->performCrossSystemLearning();
    }
    
    void testDynamicOptimization()
    {
        qDebug() << "\n‚ö° TEST OPTIMISATION DYNAMIQUE:";
        m_hybridMiner->optimizeSystemWeights();
        
        // Affichage des m√©triques
        HybridMiningMetrics metrics = m_hybridMiner->getMetrics();
        qDebug() << QString("üìä M√âTRIQUES - Total: %1, Bio: %2, Accuracy: %3%")
                    .arg(metrics.totalHashes.load())
                    .arg(metrics.biologicalPredictions.load())
                    .arg(metrics.biologicalAccuracy.load() * 100, 0, 'f', 1);
    }
    
    void testFullMining()
    {
        qDebug() << "\n‚õèÔ∏è TEST MINING COMPLET:";
        
        if (!m_hybridMiner->startHybridMining()) {
            qCritical() << "‚ùå √âchec d√©marrage mining";
            return;
        }
        
        qDebug() << "‚úÖ Mining hybride triple d√©marr√© !";
        
        // Arr√™t du mining apr√®s 5 secondes
        QTimer::singleShot(5000, [this]() {
            m_hybridMiner->stopHybridMining();
            qDebug() << "‚èπÔ∏è Mining arr√™t√©";
        });
    }

private:
    bool initializeComponents()
    {
        qDebug() << "üîß Initialisation des composants...";
        
        // 1. Initialisation HybridBitcoinMiner de base
        if (!m_hybridMiner->initialize()) {
            qCritical() << "√âchec initialisation HybridBitcoinMiner";
            return false;
        }
        
        // 2. Configuration MEA r√©el (simulation si hardware absent)
        RealMEAConfig meaConfig;
        meaConfig.deviceType = MEADeviceType::Custom_Serial;
        meaConfig.electrodeCount = 60;
        meaConfig.samplingRate = 25000.0;
        meaConfig.autoCalibration = false; // Skip pour test rapide
        
        if (!m_realMea->initialize(meaConfig)) {
            qWarning() << "MEA hardware non disponible, mode simulation";
        }
        
        // 3. Connexion RealMEA au syst√®me hybride
        if (!m_hybridMiner->connectToRealMEA(m_realMea)) {
            qCritical() << "√âchec connexion RealMEA";
            return false;
        }
        
        qDebug() << "‚úÖ Composants initialis√©s";
        return true;
    }
    
    bool configureTripleSystem()
    {
        qDebug() << "‚öôÔ∏è Configuration syst√®me triple...";
        
        // Configuration apprentissage biologique
        BiologicalLearningParams learningParams;
        learningParams.initialLearningRate = 0.02;
        learningParams.retroLearningRate = 0.01;
        learningParams.maxIterations = 200;
        learningParams.enablePlasticity = true;
        learningParams.enableAdaptation = true;
        
        if (!m_hybridMiner->configureBiologicalNetwork(learningParams)) {
            qCritical() << "√âchec configuration r√©seau biologique";
            return false;
        }
        
        // Configuration optimisation triple
        TripleOptimizationConfig tripleConfig;
        tripleConfig.sha256Weight = 0.4;
        tripleConfig.networkWeight = 0.3; 
        tripleConfig.meaWeight = 0.3;
        tripleConfig.adaptationRate = 0.05;
        tripleConfig.enableDynamicWeighting = true;
        tripleConfig.enableCrossLearning = true;
        tripleConfig.preferHighConfidence = true;
        
        if (!m_hybridMiner->initializeTripleSystem(tripleConfig)) {
            qCritical() << "√âchec initialisation syst√®me triple";
            return false;
        }
        
        // Configuration apprentissage triple
        if (!m_hybridMiner->configureTripleSystemLearning()) {
            qCritical() << "√âchec configuration apprentissage triple";
            return false;
        }
        
        qDebug() << "‚úÖ Syst√®me triple configur√©";
        return true;
    }

    HybridBitcoinMiner* m_hybridMiner;
    std::shared_ptr<RealMEAInterface> m_realMea;
};

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    app.setApplicationName("TripleSystemMiningTest");
    app.setApplicationVersion("1.0");
    
    qDebug() << "üöÄüß†‚ö° TEST SYST√àME TRIPLE R√âVOLUTIONNAIRE ‚ö°üß†üöÄ";
    qDebug() << "==================================================";
    qDebug() << "‚Ä¢ SHA-256 Traditionnel + R√©seau Biologique + MEA R√©el";
    qDebug() << "‚Ä¢ Fusion Intelligente + Apprentissage Crois√©";
    qDebug() << "‚Ä¢ Optimisation Dynamique + S√©lection Adaptative";
    qDebug() << "==================================================\n";
    
    TripleSystemTester tester;
    
    // D√©marrer le test
    QTimer::singleShot(1000, &tester, &TripleSystemTester::runTripleSystemTest);
    
    return app.exec();
}

#include "test_triple_mining.moc"