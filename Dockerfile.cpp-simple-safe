# Dockerfile.cpp-simple-safe - Version avec startup s√©curis√© pour g√©rer les erreurs pybind11
# Bas√© sur Dockerfile.cpp-simple avec wrapper de d√©marrage

FROM python:3.11-slim

# Install Qt5 development headers (including QtConcurrent)
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    g++ \
    git \
    pkg-config \
    qtbase5-dev \
    qtbase5-dev-tools \
    qt5-qmake \
    qttools5-dev-tools \
    libqt5core5a \
    libqt5network5 \
    libqt5serialport5 \
    libqt5serialport5-dev \
    libqt5widgets5 \
    libqt5concurrent5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements-cpp.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install pybind11[global]

# Copy all source files
COPY include/ ./include/
COPY src/ ./src/
COPY python_bindings/ ./python_bindings/
COPY web/ ./web/
COPY biological_bitcoin_learning.py ./
COPY real_mea_interface.py ./
COPY config/ ./config/
COPY start_server_safe.py ./
COPY patch_server_lazy_init.py ./

# Set Qt environment variables
ENV QT_SELECT=5
ENV QT_QPA_PLATFORM=offscreen
ENV DISPLAY=:0

# Generate ALL required MOC files before compilation (including Bio-Entropy)
RUN echo "üîß Generating Qt MOC files..." && \
    /usr/lib/qt5/bin/moc include/bio/biological_network.h -o src/cpp/biological_network.moc && \
    /usr/lib/qt5/bin/moc include/crypto/bitcoin_miner.h -o src/cpp/bitcoin_miner.moc && \
    if grep -q "Q_OBJECT" include/bio/mea_interface.h; then \
        /usr/lib/qt5/bin/moc include/bio/mea_interface.h -o src/cpp/mea_interface.moc; \
    fi && \
    if grep -q "Q_OBJECT" include/bio/real_mea_interface.h; then \
        /usr/lib/qt5/bin/moc include/bio/real_mea_interface.h -o src/cpp/real_mea_interface.moc; \
    fi && \
    if grep -q "Q_OBJECT" include/crypto/hybrid_bitcoin_miner.h; then \
        /usr/lib/qt5/bin/moc include/crypto/hybrid_bitcoin_miner.h -o src/cpp/hybrid_bitcoin_miner.moc; \
    fi && \
    echo "üß¨ Generating Bio-Entropy MOC files..." && \
    /usr/lib/qt5/bin/moc include/bio/ibio_compute_interface.h -o src/bio/ibio_compute_interface.moc && \
    /usr/lib/qt5/bin/moc include/bio/real_mea_adapter.h -o src/bio/real_mea_adapter.moc && \
    /usr/lib/qt5/bin/moc include/bio/biological_network_adapter.h -o src/bio/biological_network_adapter.moc && \
    /usr/lib/qt5/bin/moc include/crypto/bio_entropy_generator.h -o src/crypto/bio_entropy_generator.moc && \
    echo "‚úÖ MOC generation completed" && \
    ls -la src/cpp/*.moc src/bio/*.moc src/crypto/*.moc

# Renommer les fichiers .moc en .moc.cpp pour setuptools (including Bio-Entropy)
# Robustesse am√©lior√©e : continue m√™me si un fichier manque
RUN for file in biological_network bitcoin_miner real_mea_interface mea_interface hybrid_bitcoin_miner; do \
        if [ -f "src/cpp/${file}.moc" ]; then \
            mv "src/cpp/${file}.moc" "src/cpp/${file}.moc.cpp" && echo "‚úÖ Renamed src/cpp/${file}.moc"; \
        else \
            echo "‚ö†Ô∏è Warning: src/cpp/${file}.moc not found"; \
        fi; \
    done && \
    for file in ibio_compute_interface real_mea_adapter biological_network_adapter; do \
        if [ -f "src/bio/${file}.moc" ]; then \
            mv "src/bio/${file}.moc" "src/bio/${file}.moc.cpp" && echo "‚úÖ Renamed src/bio/${file}.moc"; \
        else \
            echo "‚ö†Ô∏è Warning: src/bio/${file}.moc not found"; \
        fi; \
    done && \
    if [ -f "src/crypto/bio_entropy_generator.moc" ]; then \
        mv "src/crypto/bio_entropy_generator.moc" "src/crypto/bio_entropy_generator.moc.cpp" && echo "‚úÖ Renamed src/crypto/bio_entropy_generator.moc"; \
    else \
        echo "‚ö†Ô∏è Warning: src/crypto/bio_entropy_generator.moc not found"; \
    fi

# Verify MOC files were created (including Bio-Entropy)
RUN echo "üîç Verifying MOC files exist:" && \
    ls -la src/cpp/*.moc.cpp src/bio/*.moc.cpp src/crypto/*.moc.cpp || echo "‚ö†Ô∏è Some MOC files missing"

# Cr√©e un setup_simple.py (adapt√© pour build avec tous les .moc.cpp)
WORKDIR /app/python_bindings

RUN echo "#!/usr/bin/env python3" > setup_simple.py && \
    echo "# Simple setup.py for Qt MOC-enabled C++ bindings (with Bio-Entropy support)" >> setup_simple.py && \
    echo "import os" >> setup_simple.py && \
    echo "from pybind11.setup_helpers import Pybind11Extension, build_ext" >> setup_simple.py && \
    echo "from setuptools import setup" >> setup_simple.py && \
    echo "" >> setup_simple.py && \
    echo "# Qt5 configuration" >> setup_simple.py && \
    echo "qt_include_dirs = ['../include', '../src/cpp', '../src/bio', '../src/crypto', '/usr/include/x86_64-linux-gnu/qt5', '/usr/include/x86_64-linux-gnu/qt5/QtCore', '/usr/include/x86_64-linux-gnu/qt5/QtNetwork', '/usr/include/x86_64-linux-gnu/qt5/QtSerialPort', '/usr/include/x86_64-linux-gnu/qt5/QtWidgets', '/usr/include/x86_64-linux-gnu/qt5/QtConcurrent']" >> setup_simple.py && \
    echo "qt_lib_dirs = ['/usr/lib/x86_64-linux-gnu']" >> setup_simple.py && \
    echo "qt_libs = ['Qt5Core', 'Qt5Network', 'Qt5SerialPort', 'Qt5Widgets', 'Qt5Concurrent']" >> setup_simple.py && \
    echo "" >> setup_simple.py && \
    echo "cpp_sources = [" >> setup_simple.py && \
    echo "    'biomining_python.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/biological_network.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/biological_network.moc.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/bitcoin_miner.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/bitcoin_miner.moc.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/real_mea_interface.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/real_mea_interface.moc.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/mea_interface.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/mea_interface.moc.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/hybrid_bitcoin_miner.cpp'," >> setup_simple.py && \
    echo "    '../src/cpp/hybrid_bitcoin_miner.moc.cpp'," >> setup_simple.py && \
    echo "    '../src/bio/ibio_compute_interface.cpp'," >> setup_simple.py && \
    echo "    '../src/bio/ibio_compute_interface.moc.cpp'," >> setup_simple.py && \
    echo "    '../src/bio/real_mea_adapter.cpp'," >> setup_simple.py && \
    echo "    '../src/bio/real_mea_adapter.moc.cpp'," >> setup_simple.py && \
    echo "    '../src/bio/biological_network_adapter.cpp'," >> setup_simple.py && \
    echo "    '../src/bio/biological_network_adapter.moc.cpp'," >> setup_simple.py && \
    echo "    '../src/crypto/bio_entropy_generator.cpp'," >> setup_simple.py && \
    echo "    '../src/crypto/bio_entropy_generator.moc.cpp'," >> setup_simple.py && \
    echo "]" >> setup_simple.py && \
    echo "" >> setup_simple.py && \
    echo "ext_modules = [Pybind11Extension(" >> setup_simple.py && \
    echo "    'biomining_cpp'," >> setup_simple.py && \
    echo "    cpp_sources," >> setup_simple.py && \
    echo "    include_dirs=qt_include_dirs," >> setup_simple.py && \
    echo "    library_dirs=qt_lib_dirs," >> setup_simple.py && \
    echo "    libraries=qt_libs," >> setup_simple.py && \
    echo "    language='c++'," >> setup_simple.py && \
    echo "    cxx_std=17," >> setup_simple.py && \
    echo "    extra_compile_args=['-DQT_CORE_LIB','-DQT_NETWORK_LIB','-DQT_SERIALPORT_LIB','-DQT_WIDGETS_LIB','-DQT_CONCURRENT_LIB','-std=c++17','-frtti']," >> setup_simple.py && \
    echo "    extra_link_args=['-Wl,-rpath,$ORIGIN']," >> setup_simple.py && \
    echo ")]" >> setup_simple.py && \
    echo "" >> setup_simple.py && \
    echo "setup(name='biomining-cpp-bioentropy', version='2.0.0', ext_modules=ext_modules, cmdclass={'build_ext': build_ext}, zip_safe=False)" >> setup_simple.py

# Compile the C++ bindings with MOC support
RUN echo "üöÄ Compiling C++ bindings with Qt MOC support..." && \
    python3 setup_simple.py build_ext --inplace

# V√©rification de la compilation et d√©placement du .so
RUN echo "üîç Verifying compilation results..." && \
    find . -name "biomining_cpp*.so" -exec ls -la {} \; && \
    find . -name "biomining_cpp*.so" -exec mv {} /app/ \;

# Final verification with detailed error reporting
RUN echo "üß™ Final verification of C++ module..." && \
    ls -la /app/biomining_cpp*.so && \
    (python3 -c "import sys; sys.path.insert(0, '/app'); import biomining_cpp; print('‚úÖ C++ module imports successfully'); print('üì¶ Available classes:', dir(biomining_cpp))" || \
    (echo "‚ö†Ô∏è C++ module verification failed, will use fallbacks" && echo "Continuing build..."))

WORKDIR /app

# Create necessary directories
RUN mkdir -p /app/data /app/uploads /app/logs

ENV PORT=8080
ENV PYTHONPATH=/app
ENV NODE_ENV=production
ENV BIOMINING_ENVIRONMENT=production
ENV QT_QPA_PLATFORM=offscreen
ENV DISPLAY=:0

EXPOSE 8080

# HEALTHCHECK removed - Cloud Run uses its own probe mechanisms
# Cloud Run ignores Dockerfile HEALTHCHECK and uses readinessProbe/livenessProbe from service config

# Apply lazy initialization patch to prevent pybind11 errors at import time
RUN python3 /app/patch_server_lazy_init.py || echo "‚ö†Ô∏è Patch failed, continuing anyway"

# Use safe startup wrapper to handle pybind11 errors gracefully
CMD ["python3", "/app/start_server_safe.py"]
