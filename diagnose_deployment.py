#!/usr/bin/env python3
"""
Script de diagnostic pour v√©rifier l'√©tat des bindings C++ d√©ploy√©s
"""

import requests
import json
import sys

def check_deployment(url):
    """V√©rifier l'√©tat d'un d√©ploiement BioMining"""
    
    print(f"üîç Diagnostic de d√©ploiement : {url}")
    print("=" * 60)
    
    # Test 1: API Status
    try:
        print("\nüìä Test 1: API Status")
        response = requests.get(f"{url}/api/status", timeout=10)
        if response.status_code == 200:
            print("‚úÖ API accessible")
            data = response.json()
            env = data.get('environment', 'unknown')
            print(f"   Environment: {env}")
        else:
            print(f"‚ùå API erreur: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur connexion API: {e}")
        return False
    
    # Test 2: Bindings Check  
    try:
        print("\nüîß Test 2: C++ Bindings")
        response = requests.get(f"{url}/api/bindings", timeout=10)
        if response.status_code == 200:
            bindings = response.json()
            cpp_available = bindings.get('cpp_available', False)
            
            if cpp_available:
                print("üéâ SUCC√àS: C++ bindings charg√©s !")
                print(f"   Module: {bindings.get('module_location', 'N/A')}")
                
                classes = bindings.get('classes', {})
                for name, available in classes.items():
                    status = "‚úÖ" if available else "‚ùå"
                    print(f"   {status} {name}")
                    
            else:
                print("‚ö†Ô∏è PROBL√àME: Fallback Python utilis√©")
                print(f"   Message: {bindings.get('message', 'N/A')}")
                print(f"   Environment: {bindings.get('environment', 'N/A')}")
                
            return cpp_available
            
        else:
            print(f"‚ùå Bindings API erreur: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur bindings check: {e}")
        return False

def test_biological_network(url):
    """Tester le BiologicalNetwork"""
    
    print(f"\nüß† Test 3: BiologicalNetwork")
    
    try:
        # Start biological system
        response = requests.post(f"{url}/api/systems/biological/start", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Biological system d√©marr√©")
        else:
            print(f"‚ö†Ô∏è Biological start: {response.status_code}")
            
        # Start training
        training_config = {
            "learning_rate": 0.01,
            "epochs": 100, 
            "difficulty": 4
        }
        
        response = requests.post(
            f"{url}/api/training/start",
            json=training_config,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Training d√©marr√©")
            data = response.json()
            print(f"   Config: {data.get('training_config', {})}")
            return True
        else:
            print(f"‚ö†Ô∏è Training start: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test BiologicalNetwork: {e}")
        return False

def main():
    if len(sys.argv) != 2:
        print("Usage: python diagnose_deployment.py <URL>")
        print("Exemple: python diagnose_deployment.py https://biomining-cpp-xxx.run.app")
        sys.exit(1)
        
    url = sys.argv[1].rstrip('/')
    
    # Diagnostic complet
    bindings_ok = check_deployment(url)
    
    if bindings_ok:
        print("\nüéä DIAGNOSTIC: C++ BINDINGS OK")
        print("   Votre d√©ploiement utilise les VRAIES classes C++")
        test_biological_network(url)
    else:
        print("\n‚ö†Ô∏è DIAGNOSTIC: FALLBACK PYTHON")
        print("   Votre d√©ploiement utilise les fallbacks Python")
        print("\nüîß SOLUTION:")
        print("   1. Red√©ployer avec Dockerfile.cpp-enabled")
        print("   2. Ou utiliser ./deploy_new_cpp_service.sh")
        print("   3. V√©rifier la configuration Cloud Run")
        
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()