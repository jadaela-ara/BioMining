#!/bin/bash
# ================================================================
# D√âPLOIEMENT AVEC BINDINGS C++ - BIOMINING WEB INTERFACE
# Script de d√©ploiement avec compilation des bindings C++
# ================================================================

set -euo pipefail

echo "üöÄ D√âPLOIEMENT BIOMINING AVEC BINDINGS C++"
echo "============================================="

# Configuration
SERVICE_NAME="biomining-cpp"
REGION="europe-west1"

# Fonction pour obtenir le PROJECT_ID
get_project_id() {
    PROJECT_ID=""
    
    # Essayer depuis l'environnement
    if [ -n "${GOOGLE_CLOUD_PROJECT:-}" ]; then
        PROJECT_ID="$GOOGLE_CLOUD_PROJECT"
        echo "‚úÖ Utilisation du PROJECT_ID: $PROJECT_ID (depuis GOOGLE_CLOUD_PROJECT)"
        return
    fi
    
    # Essayer depuis gcloud config
    PROJECT_ID=$(gcloud config get-value project 2>/dev/null || echo "")
    if [ -n "$PROJECT_ID" ]; then
        echo "‚úÖ Utilisation du PROJECT_ID: $PROJECT_ID (depuis gcloud config)"
        return
    fi
    
    # Demander √† l'utilisateur
    echo "‚ùå Aucun projet GCP configur√©"
    echo ""
    echo "Vos projets disponibles :"
    gcloud projects list --format="table(projectId,name)" 2>/dev/null || {
        echo "   Erreur: Vous devez vous authentifier avec 'gcloud auth login'"
        exit 1
    }
    echo ""
    read -p "Entrez votre PROJECT_ID : " PROJECT_ID
    
    if [ -z "$PROJECT_ID" ]; then
        echo "‚ùå PROJECT_ID requis"
        exit 1
    fi
    
    gcloud config set project "$PROJECT_ID"
    echo "‚úÖ Projet configur√©: $PROJECT_ID"
}

# V√©rifications
echo "üîç V√©rifications..."

# V√©rifier gcloud
if ! command -v gcloud &> /dev/null; then
    echo "‚ùå gcloud CLI manquant. Installez-le depuis: https://cloud.google.com/sdk/docs/install"
    exit 1
fi

# Obtenir le PROJECT_ID
get_project_id

# V√©rifier auth
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | head -1 | grep -q .; then
    echo "‚ùå Non authentifi√©. Ex√©cutez: gcloud auth login"
    exit 1
fi

# V√©rifier les fichiers C++
required_files=(
    "requirements-cpp.txt"
    "Dockerfile.cpp-enabled" 
    "web/api/server.py"
    "web/index.html"
    "python_bindings/setup.py"
    "python_bindings/biomining_python.cpp"
    "include/bio/biological_network.h"
    "include/crypto/hybrid_bitcoin_miner.h"
    "src/cpp/biological_network.cpp"
    "src/cpp/hybrid_bitcoin_miner.cpp"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå Fichier manquant: $file"
        exit 1
    fi
done

echo "‚úÖ Tous les fichiers C++ pr√©sents"
echo ""
echo "üìä Configuration:"
echo "   - Projet: $PROJECT_ID"
echo "   - Service: $SERVICE_NAME"
echo "   - R√©gion: $REGION"
echo "   - Bindings C++: Activ√©s"
echo ""

# Activer les services
echo "üîß Activation des services Google Cloud..."
gcloud services enable cloudbuild.googleapis.com run.googleapis.com artifactregistry.googleapis.com --quiet

# Sauvegarder et utiliser le Dockerfile C++
echo "üì¶ Pr√©paration du conteneur avec bindings C++..."

BACKUP_NEEDED=false
if [ -f "Dockerfile" ]; then
    mv Dockerfile Dockerfile.backup
    BACKUP_NEEDED=true
fi

# Copier le Dockerfile C++
cp Dockerfile.cpp-enabled Dockerfile

# Sauvegarder et utiliser les requirements C++
BACKUP_REQ_NEEDED=false
if [ -f "requirements.txt" ]; then
    mv requirements.txt requirements.backup.txt
    BACKUP_REQ_NEEDED=true
fi

# Copier les requirements C++
cp requirements-cpp.txt requirements.txt

echo "üöÄ D√©ploiement avec compilation C++..."
echo "‚è≥ Cela peut prendre 5-10 minutes (compilation C++)..."

# D√©ployer avec plus de ressources pour la compilation
gcloud run deploy "$SERVICE_NAME" \
    --source . \
    --platform managed \
    --region "$REGION" \
    --allow-unauthenticated \
    --memory "4Gi" \
    --cpu "4" \
    --port 8080 \
    --timeout=3600 \
    --concurrency=80 \
    --max-instances=10 \
    --quiet \
    2>/dev/null

deployment_success=$?

# Nettoyer
rm -f Dockerfile requirements.txt
if [ "$BACKUP_NEEDED" = true ]; then
    mv Dockerfile.backup Dockerfile
fi
if [ "$BACKUP_REQ_NEEDED" = true ]; then
    mv requirements.backup.txt requirements.txt
fi

# R√©sultats
if [ $deployment_success -eq 0 ]; then
    echo ""
    echo "üéâ SUCC√àS ! Bindings C++ d√©ploy√©s !"
    echo "=================================="
    
    # Obtenir l'URL
    SERVICE_URL=$(gcloud run services describe "$SERVICE_NAME" \
        --region="$REGION" \
        --format="value(status.url)" 2>/dev/null)
    
    echo ""
    echo "üåê URL de votre application: $SERVICE_URL"
    echo "üìä API Status: $SERVICE_URL/api/status"
    echo "üîß Bindings C++: ACTIV√âS (biomining_cpp module)"
    echo ""
    echo "‚úÖ Votre plateforme BioMining avec vrais bindings C++ est en ligne !"
    
    # Test des bindings
    if command -v curl &> /dev/null; then
        echo ""
        echo "üß™ Test des bindings C++..."
        sleep 10
        
        # Test API status
        if response=$(curl -f -s "$SERVICE_URL/api/status" 2>/dev/null); then
            echo "‚úÖ API fonctionnelle !"
            
            # V√©rifier si les bindings C++ sont charg√©s
            if echo "$response" | grep -q '"bindings.*true"' 2>/dev/null; then
                echo "‚úÖ Bindings C++ charg√©s avec succ√®s !"
            else
                echo "‚ö†Ô∏è  Bindings C++ en cours de chargement..."
            fi
        else
            echo "‚ö†Ô∏è  Application en cours de d√©marrage..."
        fi
        
        echo ""
        echo "üéØ Pour tester l'apprentissage BiologicalNetwork:"
        echo "   1. Allez sur: $SERVICE_URL"
        echo "   2. D√©marrez le syst√®me biological"  
        echo "   3. Lancez un training - il utilisera maintenant les VRAIS bindings C++ !"
    fi
    
else
    echo ""
    echo "‚ùå √âCHEC DU D√âPLOIEMENT"
    echo "====================="
    echo ""
    echo "üí° Solutions :"
    echo "   1. V√©rifiez que la facturation est activ√©e"
    echo "   2. Augmentez les quotas Cloud Build"
    echo "   3. Essayez une r√©gion diff√©rente"
    echo "   4. V√©rifiez les logs : gcloud run logs read --service=$SERVICE_NAME --region=$REGION"
    exit 1
fi