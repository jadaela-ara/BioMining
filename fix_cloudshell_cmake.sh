#!/bin/bash

echo "üîß Correction des erreurs CMake pour Cloud Shell..."

# 1. Installer les d√©pendances manquantes
echo "üì¶ Installation des d√©pendances manquantes..."

# Boost - R√©installation propre
sudo apt-get remove -y libboost-all-dev 2>/dev/null
sudo apt-get autoremove -y
sudo apt-get install -y libboost-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev

# XKB pour les interfaces X11
sudo apt-get install -y libxkbcommon-dev libxkbcommon-x11-dev

# Autres d√©pendances potentiellement manquantes
sudo apt-get install -y \
    libx11-dev \
    libxext-dev \
    libxrandr-dev \
    libxcursor-dev \
    libxinerama-dev \
    libxi-dev

echo "‚úÖ D√©pendances install√©es"

# 2. Nettoyer le cache CMake
echo "üßπ Nettoyage du cache CMake..."
rm -rf build/
mkdir -p build

# 3. Configuration alternative sans Boost (si n√©cessaire)
echo "‚öôÔ∏è Configuration CMake..."

cd build

# Option 1: Essayer avec Boost
echo "Tentative 1: Configuration avec Boost..."
if cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON 2>/dev/null; then
    echo "‚úÖ Configuration avec Boost r√©ussie!"
else
    echo "‚ö†Ô∏è Configuration avec Boost √©chou√©e, tentative sans Boost..."
    
    # Option 2: Configuration sans Boost
    echo "Tentative 2: Configuration sans Boost..."
    if cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_TESTS=ON \
        -DBUILD_EXAMPLES=ON \
        -DBoost_NO_SYSTEM_PATHS=ON \
        -DBOOST_ROOT=/nonexistent 2>/dev/null; then
        echo "‚úÖ Configuration sans Boost r√©ussie!"
    else
        echo "Tentative 3: Configuration minimaliste..."
        # Option 3: Configuration minimaliste
        cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=ON \
            -DBUILD_EXAMPLES=OFF \
            -DCMAKE_DISABLE_FIND_PACKAGE_Boost=TRUE \
            -DCMAKE_DISABLE_FIND_PACKAGE_XKB=TRUE
        echo "‚úÖ Configuration minimaliste appliqu√©e!"
    fi
fi

# 4. Test de compilation
echo "üî® Test de compilation..."
if make -j$(nproc) 2>/dev/null; then
    echo "üéâ Compilation r√©ussie!"
    echo ""
    echo "‚úÖ BioMining configur√© avec succ√®s pour Cloud Shell!"
else
    echo "‚ö†Ô∏è Erreurs de compilation d√©tect√©es. Tentative de compilation partielle..."
    
    # Essayer de compiler seulement la biblioth√®que core
    if make biomining_core 2>/dev/null; then
        echo "‚úÖ Biblioth√®que core compil√©e avec succ√®s!"
        echo "‚ÑπÔ∏è Certains composants peuvent ne pas √™tre disponibles."
    else
        echo "‚ùå √âchec de la compilation. Consultez les logs pour plus de d√©tails."
        echo ""
        echo "üîç Diagnostics recommand√©s:"
        echo "  1. V√©rifiez les versions: gcc --version && cmake --version"
        echo "  2. V√©rifiez Qt: qmake6 --version || qmake --version"
        echo "  3. Essayez la compilation manuelle avec plus de d√©tails:"
        echo "     make VERBOSE=1"
        exit 1
    fi
fi

echo ""
echo "üìã Configuration finale:"
echo "  - R√©pertoire de build: $(pwd)"
echo "  - Type de build: Release"
echo "  - Tests: $([ -f test_mea_interface ] && echo 'Disponibles' || echo 'Non compil√©s')"
echo ""
echo "üöÄ Commandes utiles:"
echo "  make test          # Ex√©cuter les tests"
echo "  make clean         # Nettoyer"
echo "  make VERBOSE=1     # Compilation d√©taill√©e"