#!/bin/bash
# ================================================================
# D√âPLOIEMENT SIMPLE ET ROBUSTE - BIOMINING WEB INTERFACE
# Script de d√©ploiement simplifi√© avec gestion d'erreurs am√©lior√©e
# ================================================================

set -euo pipefail

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleurs
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

echo "üöÄ D√âPLOIEMENT SIMPLE - BIOMINING WEB INTERFACE"
echo "=============================================="

# Configuration par d√©faut
DEFAULT_PROJECT_ID=""
DEFAULT_REGION="europe-west1"
SERVICE_NAME="biomining-web"

# Demander le PROJECT_ID si non configur√©
get_project_id() {
    # Essayer de r√©cup√©rer depuis l'environnement
    if [ -n "${GOOGLE_CLOUD_PROJECT:-}" ]; then
        PROJECT_ID="$GOOGLE_CLOUD_PROJECT"
        log_info "Utilisation du PROJECT_ID depuis GOOGLE_CLOUD_PROJECT: $PROJECT_ID"
        return
    fi
    
    # Essayer de r√©cup√©rer depuis gcloud config
    PROJECT_ID=$(gcloud config get-value project 2>/dev/null || echo "")
    
    if [ -n "$PROJECT_ID" ]; then
        log_info "Utilisation du PROJECT_ID depuis gcloud config: $PROJECT_ID"
        return
    fi
    
    # Demander √† l'utilisateur
    log_warning "Aucun projet GCP configur√©."
    echo ""
    echo "üìã Projets disponibles :"
    gcloud projects list --format="table(projectId,name)" 2>/dev/null || {
        log_error "Impossible de lister les projets. Vous devez vous authentifier :"
        echo "   gcloud auth login"
        exit 1
    }
    echo ""
    read -p "Entrez votre PROJECT_ID : " PROJECT_ID
    
    if [ -z "$PROJECT_ID" ]; then
        log_error "PROJECT_ID requis pour le d√©ploiement"
        exit 1
    fi
}

# V√©rifications pr√©liminaires
log_info "V√©rifications pr√©liminaires..."

# V√©rifier gcloud CLI
if ! command -v gcloud &> /dev/null; then
    log_error "gcloud CLI non trouv√©"
    echo "üì• Installez-le depuis: https://cloud.google.com/sdk/docs/install"
    exit 1
fi

# V√©rifier curl pour les tests
if ! command -v curl &> /dev/null; then
    log_warning "curl non trouv√© - les tests de sant√© seront ignor√©s"
fi

# Obtenir le PROJECT_ID
get_project_id

# V√©rifier l'authentification
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
    log_error "Vous n'√™tes pas authentifi√© avec gcloud"
    echo "üîê Ex√©cutez: gcloud auth login"
    exit 1
fi

# Afficher la configuration
log_success "Configuration valid√©e"
echo "üìä Param√®tres de d√©ploiement:"
echo "   - Projet GCP: $PROJECT_ID"
echo "   - R√©gion: $DEFAULT_REGION"
echo "   - Service: $SERVICE_NAME"
echo ""

# Configurer le projet
log_info "Configuration du projet GCP..."
gcloud config set project "$PROJECT_ID"

# Activer les services n√©cessaires
log_info "Activation des services Google Cloud..."
gcloud services enable cloudbuild.googleapis.com --quiet
gcloud services enable run.googleapis.com --quiet
gcloud services enable containerregistry.googleapis.com --quiet

# Configurer Docker auth
log_info "Configuration de l'authentification Docker..."
gcloud auth configure-docker --quiet

# V√©rifier les fichiers n√©cessaires
log_info "V√©rification des fichiers du projet..."
required_files=(
    "requirements-no-psutil.txt"
    "web/api/server.py"
    "web/index.html"
    "biological_bitcoin_learning.py"
    "real_mea_interface.py"
)

missing_files=()
for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -ne 0 ]; then
    log_error "Fichiers manquants :"
    printf '   - %s\n' "${missing_files[@]}"
    exit 1
fi

log_success "Tous les fichiers n√©cessaires sont pr√©sents"

# Cr√©er un Dockerfile optimis√© temporaire
log_info "Pr√©paration du conteneur..."
cat > Dockerfile.deploy << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# Installer les d√©pendances syst√®me si n√©cessaires
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copier et installer les d√©pendances Python
COPY requirements-no-psutil.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copier le code de l'application
COPY web/ ./web/
COPY biological_bitcoin_learning.py ./
COPY real_mea_interface.py ./

# Copier les r√©pertoires optionnels s'ils existent
COPY src/ ./src/ 2>/dev/null || echo "src/ directory not found, skipping"
COPY config/ ./config/ 2>/dev/null || echo "config/ directory not found, skipping"

# Cr√©er les r√©pertoires de donn√©es
RUN mkdir -p /app/data /app/uploads /app/logs

# Variables d'environnement
ENV PORT=8080
ENV PYTHONPATH=/app
ENV NODE_ENV=production
ENV BIOMINING_ENVIRONMENT=production

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/api/status || exit 1

EXPOSE 8080

CMD ["python", "-m", "uvicorn", "web.api.server:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "1"]
EOF

# Construire et d√©ployer
log_info "Construction et d√©ploiement de l'application..."
echo "‚è≥ Cette √©tape peut prendre 2-5 minutes..."

# Sauvegarder le Dockerfile existant s'il y en a un
if [ -f "Dockerfile" ]; then
    mv Dockerfile Dockerfile.backup
    BACKUP_NEEDED=true
else
    BACKUP_NEEDED=false
fi

# Utiliser notre Dockerfile personnalis√©
mv Dockerfile.deploy Dockerfile

gcloud run deploy "$SERVICE_NAME" \
    --source . \
    --platform managed \
    --region "$DEFAULT_REGION" \
    --allow-unauthenticated \
    --memory "2Gi" \
    --cpu "2" \
    --concurrency "50" \
    --timeout "600s" \
    --max-instances "10" \
    --port 8080 \
    --set-env-vars "PORT=8080,NODE_ENV=production,BIOMINING_ENVIRONMENT=production" \
    --labels "app=biomining-web,version=1-0-0" \
    --quiet

# Restaurer le Dockerfile original
rm -f Dockerfile
if [ "$BACKUP_NEEDED" = true ]; then
    mv Dockerfile.backup Dockerfile
fi

deployment_exit_code=$?

# Le Dockerfile a d√©j√† √©t√© nettoy√© plus haut

# V√©rifier le succ√®s du d√©ploiement
if [ $deployment_exit_code -eq 0 ]; then
    log_success "D√©ploiement termin√© avec succ√®s!"
    echo ""
    
    # Obtenir l'URL du service
    SERVICE_URL=$(gcloud run services describe "$SERVICE_NAME" \
        --region="$DEFAULT_REGION" \
        --format="value(status.url)")
    
    echo "üåê VOTRE APPLICATION EST EN LIGNE !"
    echo "================================="
    echo "üîó URL principale:     $SERVICE_URL/"
    echo "üìä API Status:         $SERVICE_URL/api/status"
    echo "üîå WebSocket:          wss://${SERVICE_URL#https://}/ws/hybrid-mining"
    echo ""
    
    # Test de sant√© si curl est disponible
    if command -v curl &> /dev/null; then
        log_info "Test de l'application..."
        sleep 10  # Attendre que le service soit compl√®tement d√©marr√©
        
        if curl -f -s "$SERVICE_URL/api/status" > /dev/null 2>&1; then
            log_success "Application en ligne et fonctionnelle!"
        else
            log_warning "L'application d√©marre encore. Testez dans 30-60 secondes."
        fi
    fi
    
    echo ""
    echo "üéâ F√©licitations ! Votre interface de minage Bitcoin biologique est d√©ploy√©e !"
    echo "üì± Visitez l'URL ci-dessus pour acc√©der √† votre application."
    
else
    log_error "√âchec du d√©ploiement"
    echo ""
    echo "üîç Conseils de d√©pannage :"
    echo "   1. V√©rifiez vos quotas GCP"
    echo "   2. Consultez les logs :"
    echo "      gcloud logging read 'resource.type=\"cloud_run_revision\"' --limit 10"
    echo "   3. V√©rifiez la facturation du projet"
    echo "   4. Essayez avec une autre r√©gion :"
    echo "      GOOGLE_CLOUD_REGION=us-central1 $0"
    exit 1
fi