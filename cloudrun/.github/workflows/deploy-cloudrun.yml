name: üß¨ Deploy BioMining Platform to Cloud Run

on:
  push:
    branches: [ main, production ]
    paths:
      - 'cloudrun/**'
      - '.github/workflows/deploy-cloudrun.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'cloudrun/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

# Environment variables
env:
  REGISTRY: gcr.io
  SERVICE_NAME: biomining-platform
  REGION: us-central1

jobs:
  # ====================================================================
  # BUILD ET TESTS
  # ====================================================================
  
  build-and-test:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîß Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build libssl-dev
      
      - name: üìä Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT }}/${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
      
      - name: üîê Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: üîß Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      
      - name: üê≥ Configure Docker for GCR
        run: gcloud auth configure-docker --quiet
      
      - name: üß™ Run Unit Tests
        run: |
          cd cloudrun
          mkdir -p build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON ..
          ninja
          # ctest --output-on-failure # Uncomment when tests are implemented
        
      - name: üîç Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'cloudrun/'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: üìä Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: üèóÔ∏è Build Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./cloudrun
          file: ./cloudrun/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TYPE=Release
            GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT }}
            GITHUB_SHA=${{ github.sha }}
            GITHUB_REF=${{ github.ref }}
      
      - name: üîç Scan Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
      
      - name: üìä Upload Docker Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # ====================================================================
  # D√âPLOIEMENT STAGING
  # ====================================================================
  
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üîê Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: üîß Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      
      - name: üöÄ Deploy to Cloud Run (Staging)
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}-staging
          image: ${{ needs.build-and-test.outputs.image-tag }}
          region: ${{ env.REGION }}
          flags: |
            --memory=2Gi
            --cpu=2
            --concurrency=100
            --timeout=300
            --min-instances=0
            --max-instances=5
            --port=8080
            --allow-unauthenticated
            --ingress=all
            --execution-environment=gen2
            --cpu-throttling=false
          env_vars: |
            BIOMINING_ENVIRONMENT=staging
            GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT }}
            DEPLOYMENT_TIMESTAMP=${{ github.run_id }}
            GITHUB_SHA=${{ github.sha }}
          labels: |
            app=biomining
            environment=staging
            version=${{ github.sha }}
      
      - name: üè• Health Check (Staging)
        run: |
          echo "Waiting for service to be ready..."
          sleep 30
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f -s "${{ steps.deploy.outputs.url }}/health"; then
              echo "‚úÖ Health check passed"
              break
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done
      
      - name: üß™ Integration Tests (Staging)
        run: |
          BASE_URL="${{ steps.deploy.outputs.url }}"
          
          # Test API endpoints
          curl -f "$BASE_URL/api/status" || exit 1
          curl -f "$BASE_URL/api/metrics" || exit 1
          
          # Test configuration endpoint
          curl -f -X POST "$BASE_URL/api/configure" \
            -H "Content-Type: application/json" \
            -d '{"mea":{"num_electrodes":60}}'
          
          echo "‚úÖ All integration tests passed"

  # ====================================================================
  # D√âPLOIEMENT PRODUCTION
  # ====================================================================
  
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/production'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üîê Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: üîß Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      
      - name: üöÄ Deploy to Cloud Run (Production)
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ needs.build-and-test.outputs.image-tag }}
          region: ${{ env.REGION }}
          flags: |
            --memory=4Gi
            --cpu=4
            --concurrency=200
            --timeout=600
            --min-instances=1
            --max-instances=20
            --port=8080
            --no-allow-unauthenticated
            --ingress=all
            --execution-environment=gen2
            --cpu-throttling=false
          env_vars: |
            BIOMINING_ENVIRONMENT=production
            GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT }}
            DEPLOYMENT_TIMESTAMP=${{ github.run_id }}
            GITHUB_SHA=${{ github.sha }}
          labels: |
            app=biomining
            environment=production
            version=${{ github.sha }}
      
      - name: üîê Configure IAM for Production
        run: |
          # Add specific IAM policies for production
          gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --member="allUsers" \
            --role="roles/run.invoker"
      
      - name: üè• Health Check (Production)
        run: |
          echo "Waiting for production service to be ready..."
          sleep 60
          
          # Extended health checks for production
          for i in {1..10}; do
            if curl -f -s "${{ steps.deploy.outputs.url }}/health"; then
              echo "‚úÖ Production health check passed"
              break
            fi
            echo "Production health check attempt $i failed, retrying..."
            sleep 15
          done
      
      - name: üìä Performance Tests (Production)
        run: |
          BASE_URL="${{ steps.deploy.outputs.url }}"
          
          # Load testing with Apache Bench
          echo "Running performance tests..."
          
          # Test concurrent requests
          ab -n 100 -c 10 "$BASE_URL/health" || true
          ab -n 50 -c 5 "$BASE_URL/api/status" || true
          
          echo "‚úÖ Performance tests completed"

  # ====================================================================
  # NOTIFICATION ET MONITORING
  # ====================================================================
  
  notify:
    name: üì¢ Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: üìß Slack Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üß¨ BioMining Platform Deployment
            
            Status: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            
            Staging: ${{ needs.deploy-staging.result }}
            Production: ${{ needs.deploy-production.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: üìä Update Deployment Status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ github.event.deployment.id }}
          env_url: ${{ needs.deploy-production.outputs.url || needs.deploy-staging.outputs.url }}

  # ====================================================================
  # MONITORING POST-D√âPLOIEMENT
  # ====================================================================
  
  monitor:
    name: üìà Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success() && github.ref == 'refs/heads/production'
    
    steps:
      - name: üîß Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      
      - name: üìä Check Metrics
        run: |
          # Wait for metrics to populate
          sleep 120
          
          # Query Cloud Monitoring for service health
          gcloud logging read "resource.type=cloud_run_revision 
            AND resource.labels.service_name=${{ env.SERVICE_NAME }}
            AND severity>=ERROR" \
            --limit=10 \
            --format="table(timestamp,severity,textPayload)"
      
      - name: üö® Create Alert if Issues
        run: |
          # Create monitoring alert for high error rate
          gcloud alpha monitoring policies create \
            --policy-from-file=cloudrun/monitoring/alert-policy.yaml \
            || echo "Alert policy already exists"