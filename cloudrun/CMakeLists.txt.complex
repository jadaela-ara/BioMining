cmake_minimum_required(VERSION 3.16)
project(BioMining VERSION 1.0.0 LANGUAGES CXX)

# ====================================================================
# PROJECT CONFIGURATION
# ====================================================================

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Optimization flags for Cloud Run (portable)
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -march=x86-64 -mtune=generic")
set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -DDEBUG")

# Additional optimizations for release
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffast-math -funroll-loops")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections")
endif()

# Default to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")

# ====================================================================
# DEPENDENCIES
# ====================================================================

find_package(PkgConfig REQUIRED)
find_package(Threads REQUIRED)

# OpenSSL for Bitcoin SHA-256
find_package(OpenSSL REQUIRED)
if(OpenSSL_FOUND)
    message(STATUS "Found OpenSSL ${OPENSSL_VERSION}")
else()
    message(FATAL_ERROR "OpenSSL not found")
endif()

# Check for system libraries
find_library(RT_LIB rt)
if(RT_LIB)
    message(STATUS "Found librt: ${RT_LIB}")
endif()

# ====================================================================
# EXTERNAL LIBRARIES (Header-only)
# ====================================================================

# nlohmann/json (header-only)
include(FetchContent)

FetchContent_Declare(
    json
    GIT_REPOSITORY https://github.com/nlohmann/json.git
    GIT_TAG v3.11.2
)
FetchContent_MakeAvailable(json)

# httplib (header-only HTTP server)
FetchContent_Declare(
    httplib
    GIT_REPOSITORY https://github.com/yhirose/cpp-httplib.git
    GIT_TAG v0.14.1
)
FetchContent_MakeAvailable(httplib)

# ====================================================================
# INCLUDE DIRECTORIES
# ====================================================================

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${OPENSSL_INCLUDE_DIR})

# ====================================================================
# SOURCE FILES
# ====================================================================

set(BIOMINING_SOURCES
    src/biomining_app.cpp
    src/biomining_app_main.cpp
)

set(BIOMINING_HEADERS
    include/biomining_app.hpp
)

# ====================================================================
# EXECUTABLE TARGET
# ====================================================================

add_executable(biomining_server ${BIOMINING_SOURCES} ${BIOMINING_HEADERS})

# ====================================================================
# LINKING
# ====================================================================

target_link_libraries(biomining_server
    PRIVATE
    nlohmann_json::nlohmann_json
    httplib::httplib
    OpenSSL::SSL
    OpenSSL::Crypto
    Threads::Threads
)

# Link system libraries if available
if(RT_LIB)
    target_link_libraries(biomining_server PRIVATE ${RT_LIB})
endif()

# ====================================================================
# COMPILE OPTIONS
# ====================================================================

target_compile_options(biomining_server PRIVATE
    -Wall
    -Wextra
    -Wpedantic
    -Wno-unused-parameter
    -fPIC
)

# Cloud Run specific optimizations
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_options(biomining_server PRIVATE
        -flto              # Link Time Optimization
        -fno-rtti          # Disable RTTI for smaller binary
        -fvisibility=hidden # Hide symbols by default
    )
    target_link_options(biomining_server PRIVATE
        -flto
        -Wl,--strip-all    # Strip symbols
        -Wl,--gc-sections  # Remove unused sections
    )
endif()

# ====================================================================
# DEFINITIONS
# ====================================================================

target_compile_definitions(biomining_server PRIVATE
    BIOMINING_VERSION_MAJOR=${PROJECT_VERSION_MAJOR}
    BIOMINING_VERSION_MINOR=${PROJECT_VERSION_MINOR}
    BIOMINING_VERSION_PATCH=${PROJECT_VERSION_PATCH}
    BIOMINING_VERSION_STRING="${PROJECT_VERSION}"
)

# Cloud Run environment
if(DEFINED ENV{GOOGLE_CLOUD_PROJECT})
    target_compile_definitions(biomining_server PRIVATE
        BIOMINING_CLOUD_RUN=1
        GOOGLE_CLOUD_PROJECT="$ENV{GOOGLE_CLOUD_PROJECT}"
    )
endif()

# ====================================================================
# INSTALLATION
# ====================================================================

install(TARGETS biomining_server
    RUNTIME DESTINATION bin
)

# Install configuration template
install(FILES config/biomining_config.json
    DESTINATION config
    OPTIONAL
)

# ====================================================================
# TESTING (Optional)
# ====================================================================

option(BUILD_TESTS "Build test suite" OFF)

if(BUILD_TESTS)
    enable_testing()
    
    # Simple smoke test
    add_test(
        NAME biomining_help_test
        COMMAND biomining_server --help
    )
    
    # Health check test (requires server to be running)
    add_test(
        NAME biomining_health_test
        COMMAND curl -f http://localhost:8080/health || echo "Health check test requires running server"
    )
endif()

# ====================================================================
# PACKAGING
# ====================================================================

set(CPACK_PACKAGE_NAME "biomining")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "BioMining Platform - High Performance C++ Application")
set(CPACK_PACKAGE_VENDOR "BioMining Team")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/../LICENSE")

# DEB package
set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6, libssl3, libstdc++6")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "BioMining Team")

# RPM package  
set(CPACK_RPM_PACKAGE_REQUIRES "glibc, openssl-libs, libstdc++")
set(CPACK_RPM_PACKAGE_GROUP "Applications/Science")

include(CPack)

# ====================================================================
# CUSTOM TARGETS
# ====================================================================

# Docker build target
add_custom_target(docker-build
    COMMAND docker build -t biomining:latest .
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Building Docker image"
)

# Cloud Run deploy target
add_custom_target(cloud-run-deploy
    COMMAND gcloud run deploy biomining 
        --image gcr.io/${GOOGLE_CLOUD_PROJECT}/biomining:latest
        --platform managed
        --region us-central1
        --allow-unauthenticated
        --memory 2Gi
        --cpu 2
        --concurrency 100
        --timeout 300
        --port 8080
    DEPENDS docker-build
    COMMENT "Deploying to Google Cloud Run"
)

# Performance benchmark target
add_custom_target(benchmark
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/biomining_server --config /dev/null &
    COMMAND sleep 5
    COMMAND curl -s http://localhost:8080/api/metrics | jq .
    COMMAND pkill biomining_server
    DEPENDS biomining_server
    COMMENT "Running performance benchmark"
)

# ====================================================================
# SUMMARY
# ====================================================================

message(STATUS "")
message(STATUS "BioMining Platform Configuration Summary:")
message(STATUS "=========================================")
message(STATUS "Version:        ${PROJECT_VERSION}")
message(STATUS "Build Type:     ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard:   ${CMAKE_CXX_STANDARD}")
message(STATUS "Install Prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "OpenSSL:        ${OPENSSL_VERSION}")
message(STATUS "Threads:        ${CMAKE_THREAD_LIBS_INIT}")
if(DEFINED ENV{GOOGLE_CLOUD_PROJECT})
message(STATUS "Cloud Project:  $ENV{GOOGLE_CLOUD_PROJECT}")
endif()
message(STATUS "")
message(STATUS "Targets available:")
message(STATUS "  biomining_server    - Main executable")
message(STATUS "  docker-build        - Build Docker image")
message(STATUS "  cloud-run-deploy    - Deploy to Cloud Run")
message(STATUS "  benchmark           - Run performance tests")
if(BUILD_TESTS)
message(STATUS "  test                - Run test suite")
endif()
message(STATUS "=========================================")
message(STATUS "")