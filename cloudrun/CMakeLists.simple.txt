cmake_minimum_required(VERSION 3.16)
project(BioMining VERSION 1.0.0 LANGUAGES CXX)

# ====================================================================
# PROJECT CONFIGURATION
# ====================================================================

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Optimization flags for Cloud Run (portable)
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -march=x86-64 -mtune=generic")
set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -DDEBUG")

# Additional optimizations for release
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffast-math -funroll-loops")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections")
endif()

# Default to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")

# ====================================================================
# DEPENDENCIES
# ====================================================================

find_package(PkgConfig REQUIRED)
find_package(Threads REQUIRED)

# OpenSSL for Bitcoin SHA-256
find_package(OpenSSL REQUIRED)
if(OpenSSL_FOUND)
    message(STATUS "Found OpenSSL ${OPENSSL_VERSION}")
else()
    message(FATAL_ERROR "OpenSSL not found")
endif()

# Use system nlohmann/json if available, otherwise use simple header
find_path(JSON_INCLUDE_DIR nlohmann/json.hpp
    PATHS /usr/include /usr/local/include
)

if(JSON_INCLUDE_DIR)
    message(STATUS "Found system nlohmann/json")
    include_directories(${JSON_INCLUDE_DIR})
else()
    message(STATUS "Using bundled JSON header")
    # Create a simple JSON stub if needed
endif()

# ====================================================================
# INCLUDE DIRECTORIES
# ====================================================================

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${OPENSSL_INCLUDE_DIR})

# ====================================================================
# SOURCE FILES
# ====================================================================

set(BIOMINING_SOURCES
    src/biomining_app.cpp
    src/biomining_app_main.cpp
)

set(BIOMINING_HEADERS
    include/biomining_app.hpp
)

# ====================================================================
# EXECUTABLE TARGET
# ====================================================================

add_executable(biomining_server ${BIOMINING_SOURCES} ${BIOMINING_HEADERS})

# ====================================================================
# LINKING
# ====================================================================

target_link_libraries(biomining_server
    PRIVATE
    ${OPENSSL_LIBRARIES}
    Threads::Threads
)

# Optional libraries
if(RT_LIB)
    target_link_libraries(biomining_server PRIVATE ${RT_LIB})
endif()

# ====================================================================
# COMPILER-SPECIFIC OPTIONS
# ====================================================================

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(biomining_server PRIVATE
        -Wall -Wextra -Wpedantic
        -Wno-unused-parameter
        -Wno-deprecated-declarations  # Suppress OpenSSL warnings
    )
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_options(biomining_server PRIVATE
        -Wall -Wextra -Wpedantic
        -Wno-unused-parameter
    )
endif()

# ====================================================================
# INSTALLATION
# ====================================================================

install(TARGETS biomining_server
    RUNTIME DESTINATION bin
)

install(FILES ${BIOMINING_HEADERS}
    DESTINATION include/biomining
)

# ====================================================================
# SUMMARY
# ====================================================================

message(STATUS "")
message(STATUS "BioMining Platform Configuration Summary:")
message(STATUS "=========================================")
message(STATUS "Version:        ${PROJECT_VERSION}")
message(STATUS "Build Type:     ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard:   ${CMAKE_CXX_STANDARD}")
message(STATUS "Install Prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "OpenSSL:        ${OPENSSL_VERSION}")
message(STATUS "Threads:        ${CMAKE_THREAD_LIBS_INIT}")
message(STATUS "")
message(STATUS "Targets available:")
message(STATUS "  biomining_server    - Main executable")
message(STATUS "=========================================")
message(STATUS "")