# Dockerfile WITH proper Qt MOC generation for real C++ bindings
FROM python:3.11-slim

# Install comprehensive Qt development environment
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    g++ \
    git \
    pkg-config \
    qtbase5-dev \
    qtbase5-dev-tools \
    qt5-qmake \
    qttools5-dev-tools \
    libqt5core5a \
    libqt5network5 \
    libqt5serialport5 \
    libqt5serialport5-dev \
    libqt5widgets5 \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements-cpp.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install pybind11[global]

# Copy all source files
COPY include/ ./include/
COPY src/ ./src/
COPY python_bindings/ ./python_bindings/
COPY web/ ./web/
COPY biological_bitcoin_learning.py ./
COPY real_mea_interface.py ./
COPY config/ ./config/

# Set Qt environment variables
ENV QT_SELECT=5
ENV QT_QPA_PLATFORM=offscreen
ENV DISPLAY=:0

# Generate ALL required MOC files before compilation
RUN echo "üîß Generating Qt MOC files..." && \
    mkdir -p /app/generated_moc && \
    \
    echo "Generating biological_network.moc..." && \
    /usr/lib/qt5/bin/moc include/bio/biological_network.h -o src/cpp/biological_network.moc && \
    \
    echo "Generating bitcoin_miner.moc..." && \
    /usr/lib/qt5/bin/moc include/crypto/bitcoin_miner.h -o src/cpp/bitcoin_miner.moc && \
    \
    echo "Checking if mea_interface needs MOC..." && \
    if grep -q "Q_OBJECT" include/bio/mea_interface.h; then \
        echo "Generating mea_interface.moc..." && \
        /usr/lib/qt5/bin/moc include/bio/mea_interface.h -o src/cpp/mea_interface.moc; \
    fi && \
    \
    echo "Checking if real_mea_interface needs MOC..." && \
    if grep -q "Q_OBJECT" include/bio/real_mea_interface.h; then \
        echo "Generating real_mea_interface.moc..." && \
        /usr/lib/qt5/bin/moc include/bio/real_mea_interface.h -o src/cpp/real_mea_interface.moc; \
    fi && \
    \
    echo "Checking if hybrid_bitcoin_miner needs MOC..." && \
    if grep -q "Q_OBJECT" include/crypto/hybrid_bitcoin_miner.h; then \
        echo "Generating hybrid_bitcoin_miner.moc..." && \
        /usr/lib/qt5/bin/moc include/crypto/hybrid_bitcoin_miner.h -o src/cpp/hybrid_bitcoin_miner.moc; \
    fi && \
    \
    echo "‚úÖ MOC generation completed" && \
    ls -la src/cpp/*.moc

# Verify MOC files were created
RUN echo "üîç Verifying MOC files exist:" && \
    ls -la src/cpp/*.moc || echo "‚ö†Ô∏è Some MOC files missing"

# Create enhanced setup.py with proper Qt configuration
WORKDIR /app/python_bindings

RUN cat > setup_moc_fixed.py << 'EOF'
#!/usr/bin/env python3
# Enhanced setup.py with proper Qt MOC support for BioMining C++ bindings

import os
import sys
import subprocess
from pathlib import Path
from pybind11.setup_helpers import Pybind11Extension, build_ext
from setuptools import setup

def verify_qt_installation():
    # Verify Qt5 is properly installed
    try:
        result = subprocess.run(['/usr/lib/qt5/bin/moc', '-v'], 
                              capture_output=True, text=True)
        print(f"Qt MOC version: {result.stderr.strip()}")
        return True
    except FileNotFoundError:
        print("‚ùå Qt MOC not found")
        return False

def verify_moc_files():
    # Verify all required MOC files exist
    required_moc_files = [
        '../src/cpp/biological_network.moc',
        '../src/cpp/bitcoin_miner.moc'
    ]
    
    all_exist = True
    for moc_file in required_moc_files:
        if os.path.exists(moc_file):
            print(f"‚úÖ Found: {moc_file}")
        else:
            print(f"‚ùå Missing: {moc_file}")
            all_exist = False
    
    return all_exist

print("üîß Verifying Qt MOC setup...")
if not verify_qt_installation():
    print("‚ùå Qt installation verification failed")
    sys.exit(1)

if not verify_moc_files():
    print("‚ùå MOC files verification failed")
    sys.exit(1)

print("‚úÖ Qt MOC setup verified")

# Qt5 configuration
qt_include_dirs = [
    "/usr/include/qt5",
    "/usr/include/qt5/QtCore",
    "/usr/include/qt5/QtNetwork", 
    "/usr/include/qt5/QtSerialPort",
    "/usr/include/qt5/QtWidgets",
]

qt_lib_dirs = ["/usr/lib/x86_64-linux-gnu"]
qt_libs = ["Qt5Core", "Qt5Network", "Qt5SerialPort", "Qt5Widgets"]

# Verify Qt libraries exist
print("üîç Verifying Qt libraries...")
for lib in qt_libs:
    lib_path = f"/usr/lib/x86_64-linux-gnu/lib{lib}.so"
    if os.path.exists(lib_path):
        print(f"‚úÖ Found: {lib}")
    else:
        print(f"‚ö†Ô∏è Missing: {lib} (continuing anyway)")

# Define sources (include all necessary files)
cpp_sources = [
    "biomining_python.cpp",
    "../src/cpp/biological_network.cpp",
    "../src/cpp/bitcoin_miner.cpp", 
    "../src/cpp/real_mea_interface.cpp",
    "../src/cpp/mea_interface.cpp",
    "../src/cpp/hybrid_bitcoin_miner.cpp",
]

# Verify all source files exist
print("üîç Verifying source files...")
for source in cpp_sources:
    if os.path.exists(source):
        print(f"‚úÖ Found: {source}")
    else:
        print(f"‚ùå Missing: {source}")

# Define the extension module
ext_modules = [
    Pybind11Extension(
        "biomining_cpp",
        cpp_sources,
        include_dirs=[
            "../include",
            "../src/cpp",
        ] + qt_include_dirs,
        library_dirs=qt_lib_dirs,
        libraries=qt_libs,
        language='c++',
        cxx_std=17,
        define_macros=[
            ('QT_CORE_LIB', None),
            ('QT_NETWORK_LIB', None),
            ('QT_SERIALPORT_LIB', None),
            ('QT_WIDGETS_LIB', None),
            ('QT_NO_DEBUG_OUTPUT', None),
        ],
    ),
]

class EnhancedBuildExt(build_ext):
    # Enhanced build with proper Qt flags and error handling
    
    def build_extensions(self):
        print("üî® Starting C++ compilation with Qt support...")
        
        for ext in self.extensions:
            # Add comprehensive Qt compiler flags
            ext.extra_compile_args.extend([
                '-DQT_CORE_LIB',
                '-DQT_NETWORK_LIB', 
                '-DQT_SERIALPORT_LIB',
                '-DQT_WIDGETS_LIB',
                '-DQT_NO_DEBUG_OUTPUT',
                '-std=c++17',
                '-fPIC',
                '-O2',
                '-DNDEBUG',
            ])
            
            # Add Qt linker flags
            if sys.platform.startswith('linux'):
                ext.extra_link_args.extend([
                    '-Wl,-rpath,$ORIGIN',
                    '-Wl,--as-needed',
                ])
        
        try:        
            super().build_extensions()
            print("‚úÖ C++ compilation successful!")
        except Exception as e:
            print(f"‚ùå C++ compilation failed: {e}")
            raise

setup(
    name="biomining-cpp-real",
    version="1.0.0",
    description="Real BioMining C++ bindings with Qt support",
    ext_modules=ext_modules,
    cmdclass={'build_ext': EnhancedBuildExt},
    zip_safe=False,
    python_requires=">=3.8",
)
EOF

# Compile the C++ bindings with enhanced setup
RUN echo "üöÄ Compiling C++ bindings with Qt MOC support..." && \
    python3 setup_moc_fixed.py build_ext --inplace

# Verify compilation success
RUN echo "üîç Verifying compilation results..." && \
    find . -name "biomining_cpp*.so" -exec ls -la {} \; && \
    find . -name "biomining_cpp*.so" -exec mv {} /app/ \;

# Final verification
RUN echo "üß™ Final verification of C++ module..." && \
    ls -la /app/biomining_cpp*.so && \
    python3 -c "import sys; sys.path.insert(0, '/app'); import biomining_cpp; print('‚úÖ C++ module imports successfully')" || \
    echo "‚ö†Ô∏è C++ module verification failed, will use fallbacks"

# Return to main working directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p /app/data /app/uploads /app/logs

# Set environment variables
ENV PORT=8080
ENV PYTHONPATH=/app
ENV NODE_ENV=production
ENV BIOMINING_ENVIRONMENT=production
ENV QT_QPA_PLATFORM=offscreen
ENV DISPLAY=:0

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/api/status || exit 1

# Start command
CMD ["python", "-m", "uvicorn", "web.api.server:app", "--host", "0.0.0.0", "--port", "8080"]