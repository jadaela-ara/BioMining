# Dockerfile WITH C++ bindings compilation for Google Cloud Run
FROM python:3.11-slim

# Install system dependencies for C++ compilation
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    g++ \
    git \
    pkg-config \
    qtbase5-dev \
    qtbase5-dev-tools \
    libqt5core5a \
    libqt5network5 \
    libqt5serialport5 \
    libqt5serialport5-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements-no-psutil.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Install pybind11 for C++ bindings
RUN pip install pybind11[global]

# Copy all source files including C++ code
COPY include/ ./include/
COPY src/ ./src/
COPY python_bindings/ ./python_bindings/
COPY web/ ./web/
COPY biological_bitcoin_learning.py ./
COPY real_mea_interface.py ./
COPY config/ ./config/

# Compile C++ bindings with error handling
WORKDIR /app/python_bindings

# Try to compile C++ bindings, continue even if it fails
RUN python3 setup.py build_ext --inplace || echo "⚠️ C++ compilation failed, will use Python fallbacks"

# Move the compiled module if it exists
RUN find . -name "biomining_cpp*.so" -exec mv {} /app/ \; || echo "⚠️ No C++ module found, using fallbacks"

# Verify what we have
RUN ls -la /app/ | grep -E "\\.so$" || echo "⚠️ No shared libraries found"

# Return to main working directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p /app/data /app/uploads /app/logs

# Set environment variables
ENV PORT=8080
ENV PYTHONPATH=/app
ENV NODE_ENV=production
ENV BIOMINING_ENVIRONMENT=production
ENV QT_QPA_PLATFORM=offscreen
ENV DISPLAY=:0

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/api/status || exit 1

# Start command
CMD ["python", "-m", "uvicorn", "web.api.server:app", "--host", "0.0.0.0", "--port", "8080"]